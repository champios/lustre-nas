---
 fs/ext4/balloc.c |    1 +
 fs/ext4/ext4.h   |    2 ++
 fs/ext4/ialloc.c |    3 ++-
 fs/ext4/inode.c  |    1 +
 fs/ext4/super.c  |    5 +++++
 fs/ext4/xattr.c  |    2 ++
 6 files changed, 13 insertions(+), 1 deletion(-)

--- a/fs/ext4/balloc.c
+++ b/fs/ext4/balloc.c
@@ -231,6 +231,7 @@ struct ext4_group_desc * ext4_get_group_
 		*bh = sbi->s_group_desc[group_desc];
 	return desc;
 }
+EXPORT_SYMBOL(ext4_get_group_desc);

 static int ext4_valid_block_bitmap(struct super_block *sb,
 					struct ext4_group_desc *desc,
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1777,6 +1777,8 @@ extern void ext4_check_inodes_bitmap(str
 extern void ext4_mark_bitmap_end(int start_bit, int end_bit, char *bitmap);
 extern int ext4_init_inode_table(struct super_block *sb,
 				 ext4_group_t group, int barrier);
+extern struct buffer_head *ext4_read_inode_bitmap(struct super_block *sb,
+                                                  ext4_group_t block_group);

 /* mballoc.c */
 extern long ext4_mb_stats;
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -98,7 +98,7 @@ static unsigned ext4_init_inode_bitmap(s
  *
  * Return buffer_head of bitmap on success or NULL.
  */
-static struct buffer_head *
+struct buffer_head *
 ext4_read_inode_bitmap(struct super_block *sb, ext4_group_t block_group)
 {
 	struct ext4_group_desc *desc;
@@ -163,6 +163,7 @@ ext4_read_inode_bitmap(struct super_bloc
 	}
 	return bh;
 }
+EXPORT_SYMBOL(ext4_read_inode_bitmap);

 /*
  * NOTE! When we get the inode, we're the only people
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1520,6 +1520,7 @@ struct buffer_head *ext4_bread(handle_t
 	*err = -EIO;
 	return NULL;
 }
+EXPORT_SYMBOL(ext4_bread);

 static int walk_page_buffers(handle_t *handle,
 			     struct buffer_head *head,
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -165,6 +165,7 @@ __u32 ext4_itable_unused_count(struct su
 		(EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT ?
 		 (__u32)le16_to_cpu(bg->bg_itable_unused_hi) << 16 : 0);
 }
+EXPORT_SYMBOL(ext4_itable_unused_count);

 void ext4_block_bitmap_set(struct super_block *sb,
 			   struct ext4_group_desc *bg, ext4_fsblk_t blk)
@@ -298,6 +299,7 @@ handle_t *ext4_journal_start_sb(struct s
 	}
 	return jbd2_journal_start(journal, nblocks);
 }
+EXPORT_SYMBOL(ext4_journal_start_sb);

 /*
  * The only special thing we need to do here is to make sure that all
@@ -325,6 +327,7 @@ int __ext4_journal_stop(const char *wher
 		__ext4_std_error(sb, where, line, err);
 	return err;
 }
+EXPORT_SYMBOL(__ext4_journal_stop);

 void ext4_journal_abort_handle(const char *caller, unsigned int line,
 			       const char *err_fn, struct buffer_head *bh,
@@ -349,6 +352,7 @@ void ext4_journal_abort_handle(const cha

 	jbd2_journal_abort_handle(handle);
 }
+EXPORT_SYMBOL(ext4_journal_abort_handle);

 static void __save_error_info(struct super_block *sb, const char *func,
 			    unsigned int line)
@@ -4187,6 +4191,7 @@ int ext4_force_commit(struct super_block

 	return ret;
 }
+EXPORT_SYMBOL(ext4_force_commit);

 static void ext4_write_super(struct super_block *sb)
 {
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -323,6 +323,7 @@ ext4_xattr_get(struct inode *inode, int
 	up_read(&EXT4_I(inode)->xattr_sem);
 	return error;
 }
+EXPORT_SYMBOL(ext4_xattr_get);

 static int
 ext4_xattr_list_entries(struct dentry *dentry, struct ext4_xattr_entry *entry,
@@ -1074,6 +1075,7 @@ cleanup:
 	up_write(&EXT4_I(inode)->xattr_sem);
 	return error;
 }
+EXPORT_SYMBOL(ext4_xattr_set_handle);

 /*
  * ext4_xattr_set()
