---
 fs/ext4/ext4.h      |    1 +
 fs/ext4/ext4_jbd2.h |    2 +-
 fs/ext4/extents.c   |    4 ++--
 fs/ext4/ialloc.c    |    2 +-
 fs/ext4/migrate.c   |   11 ++++-------
 fs/ext4/super.c     |   43 +++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 52 insertions(+), 11 deletions(-)

--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -927,6 +927,7 @@ struct ext4_inode_info {
 #define EXT4_MOUNT_POSIX_ACL		0x08000	/* POSIX Access Control Lists */
 #define EXT4_MOUNT_NO_AUTO_DA_ALLOC	0x10000	/* No auto delalloc mapping */
 #define EXT4_MOUNT_BARRIER		0x20000 /* Use block barriers */
+#define EXT4_MOUNT_EXTENTS		0x40000 /* Extents support */
 #define EXT4_MOUNT_QUOTA		0x80000 /* Some quota option set */
 #define EXT4_MOUNT_USRQUOTA		0x100000 /* "old" user quota */
 #define EXT4_MOUNT_GRPQUOTA		0x200000 /* "old" group quota */
--- a/fs/ext4/ext4_jbd2.h
+++ b/fs/ext4/ext4_jbd2.h
@@ -33,7 +33,7 @@

 #define EXT4_SINGLEDATA_TRANS_BLOCKS(sb)				\
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
-	 ? 27U : 8U)
+	 || test_opt(sb, EXTENTS) ? 27U : 8U)

 /* Extended attribute operations touch at most two data buffers,
  * two bitmap buffers, and two group summaries, in addition to the inode
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -2734,7 +2734,7 @@ void ext4_ext_init(struct super_block *s
 	 * possible initialization would be here
 	 */

-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 #if defined(AGGRESSIVE_TEST) || defined(CHECK_BINSEARCH) || defined(EXTENTS_STATS)
 		printk(KERN_INFO "EXT4-fs: file extents enabled");
 #ifdef AGGRESSIVE_TEST
@@ -2761,7 +2761,7 @@ void ext4_ext_init(struct super_block *s
  */
 void ext4_ext_release(struct super_block *sb)
 {
-	if (!EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+	if (!test_opt(sb, EXTENTS))
 		return;

 #ifdef EXTENTS_STATS
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -1056,7 +1056,7 @@ got:
 	if (err)
 		goto fail_free_drop;

-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 		/* set extent flag only for directory, file and normal symlink*/
 		if (S_ISDIR(mode) || S_ISREG(mode) || S_ISLNK(mode)) {
 			ext4_set_inode_flag(inode, EXT4_INODE_EXTENTS);
--- a/fs/ext4/migrate.c
+++ b/fs/ext4/migrate.c
@@ -469,13 +469,10 @@ int ext4_ext_migrate(struct inode *inode
 	unsigned long max_entries;
 	__u32 goal;

-	/*
-	 * If the filesystem does not support extents, or the inode
-	 * already is extent-based, error out.
-	 */
-	if (!EXT4_HAS_INCOMPAT_FEATURE(inode->i_sb,
-				       EXT4_FEATURE_INCOMPAT_EXTENTS) ||
-	    (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)))
+	if (!test_opt(inode->i_sb, EXTENTS))
+		/*
+		 * if mounted with noextents we don't allow the migrate
+		 */
 		return -EINVAL;

 	if (S_ISLNK(inode->i_mode) && inode->i_blocks == 0)
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -1093,6 +1093,8 @@ static int ext4_show_options(struct seq_
 		seq_puts(seq, ",journal_async_commit");
 	else if (test_opt(sb, JOURNAL_CHECKSUM))
 		seq_puts(seq, ",journal_checksum");
+	if (!test_opt(sb, EXTENTS))
+		seq_puts(seq, ",noextents");
 	if (test_opt(sb, I_VERSION))
 		seq_puts(seq, ",i_version");
 	if (!test_opt(sb, DELALLOC) &&
@@ -1318,6 +1320,7 @@ enum {
 	Opt_dioread_nolock, Opt_dioread_lock, Opt_bigendian_extents,
 	Opt_discard, Opt_nodiscard, Opt_init_itable, Opt_noinit_itable,
 	Opt_mballoc, Opt_force_over_128tb,
+	Opt_extents, Opt_noextents,
 };

 static match_table_t tokens = {
@@ -1396,6 +1399,8 @@ static match_table_t tokens = {
 	{Opt_noinit_itable, "noinit_itable"},
 	{Opt_mballoc, "mballoc"},
 	{Opt_force_over_128tb, "force_over_128tb"},
+	{Opt_extents, "extents"},
+	{Opt_noextents, "noextents"},
 	{Opt_err, NULL},
 };

@@ -1497,6 +1502,7 @@ static int parse_options(char *options,
 #ifdef CONFIG_QUOTA
 	int qfmt;
 #endif
+	ext4_fsblk_t last_block;

 	if (!options)
 		return 1;
@@ -1894,6 +1900,32 @@ set_qf_format:
 		case Opt_force_over_128tb:
 			force_over_128tb = 1;
 			break;
+		case Opt_extents:
+			if (!EXT4_HAS_INCOMPAT_FEATURE(sb,
+					EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+				ext4_warning(sb, "extents feature not enabled "
+						 "on this filesystem, use tune2fs");
+				return 0;
+			}
+			set_opt(sb, EXTENTS);
+			break;
+		case Opt_noextents:
+			/*
+			 * When e2fsprogs support resizing an already existing
+			 * ext4 file system to greater than 2**32 we need to
+			 * add support to block allocator to handle growing
+			 * already existing block  mapped inode so that blocks
+			 * allocated for them fall within 2**32
+			 */
+			last_block = ext4_blocks_count(sbi->s_es) - 1;
+			if (last_block  > 0xffffffffULL) {
+				printk(KERN_ERR "EXT4-fs: Filesystem too "
+						"large to mount with "
+						"-o noextents options\n");
+				return 0;
+			}
+			clear_opt(sb, EXTENTS);
+			break;
 		default:
 			ext4_msg(sb, KERN_ERR,
 			       "Unrecognized mount option \"%s\" "
@@ -3209,6 +3241,17 @@ static int ext4_fill_super(struct super_
 		set_opt(sb, BARRIER);

 	/*
+	 * turn on extents feature by default in ext4 filesystem
+	 * only if feature flag already set by mkfs or tune2fs.
+	 * Use -o noextents to turn it off
+	 */
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+		set_opt(sb, EXTENTS);
+	else
+		ext4_warning(sb, "extents feature not enabled on this filesystem, "
+				 "use tune2fs.");
+
+	/*
 	 * enable delayed allocation by default
 	 * Use -o nodelalloc to turn it off
 	 */
