---
 fs/ext4/mballoc.c |   69 ++++++++++++++++++++++++++++++++++++++++++++++++++----
 fs/ext4/mballoc.h |    2 +
 2 files changed, 66 insertions(+), 5 deletions(-)

--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -3644,6 +3644,7 @@ ext4_mb_new_inode_pa(struct ext4_allocat
 	INIT_LIST_HEAD(&pa->pa_group_list);
 	pa->pa_deleted = 0;
 	pa->pa_type = MB_INODE_PA;
+	pa->pa_error = 0;

 	mb_debug(1, "new inode pa %p: %llu/%u for %u\n", pa,
 			pa->pa_pstart, pa->pa_len, pa->pa_lstart);
@@ -3705,6 +3706,7 @@ ext4_mb_new_group_pa(struct ext4_allocat
 	INIT_LIST_HEAD(&pa->pa_group_list);
 	pa->pa_deleted = 0;
 	pa->pa_type = MB_GROUP_PA;
+	pa->pa_error = 0;

 	mb_debug(1, "new group pa %p: %llu/%u for %u\n", pa,
 			pa->pa_pstart, pa->pa_len, pa->pa_lstart);
@@ -3765,7 +3767,9 @@ ext4_mb_release_inode_pa(struct ext4_bud
 	int err = 0;
 	int free = 0;

+	assert_spin_locked(ext4_group_lock_ptr(sb, e4b->bd_group));
 	BUG_ON(pa->pa_deleted == 0);
+	BUG_ON(pa->pa_inode == NULL);
 	ext4_get_group_no_and_offset(sb, pa->pa_pstart, &group, &bit);
 	grp_blk_start = pa->pa_pstart - bit;
 	BUG_ON(group != e4b->bd_group && pa->pa_len != 0);
@@ -3787,11 +3791,18 @@ ext4_mb_release_inode_pa(struct ext4_bud
 		mb_free_blocks(pa->pa_inode, e4b, bit, next - bit);
 		bit = next + 1;
 	}
-	if (free != pa->pa_free) {
-		printk(KERN_CRIT "pa %p: logic %lu, phys. %lu, len %lu\n",
-			pa, (unsigned long) pa->pa_lstart,
-			(unsigned long) pa->pa_pstart,
-			(unsigned long) pa->pa_len);
+
+        /* "free < pa->pa_free" means we maybe double alloc the same blocks,
+         * otherwise maybe leave some free blocks unavailable, no need to BUG.*/
+        if ((free > pa->pa_free && !pa->pa_error) || (free < pa->pa_free)) {
+                ext4_error(sb,"pa free mismatch: [pa %p] "
+                              "[phy %lu] [logic %lu] [len %u] [free %u] "
+                              "[error %u] [inode %lu] [freed %u]", pa,
+                              (unsigned long)pa->pa_pstart,
+                              (unsigned long)pa->pa_lstart,
+                              (unsigned)pa->pa_len, (unsigned)pa->pa_free,
+                              (unsigned)pa->pa_error, pa->pa_inode->i_ino,
+                              free);
 		ext4_grp_locked_error(sb, group, 0, 0, "free %u, pa_free %u",
 					free, pa->pa_free);
 		/*
@@ -3799,6 +3810,7 @@ ext4_mb_release_inode_pa(struct ext4_bud
 		 * from the bitmap and continue.
 		 */
 	}
+        BUG_ON(pa->pa_free != free);
 	atomic_add(free, &sbi->s_mb_discarded);

 	return err;
@@ -4482,6 +4494,24 @@ ext4_fsblk_t ext4_mb_new_blocks(handle_t
 		}
 	}

+
+        if (dev_check_rdonly(sb->s_bdev)) {
+                struct block_device *bdev = sb->s_bdev;
+
+                printk(KERN_WARNING "Alloc from readonly device %s (%#x): "
+                       "[inode %lu] [logic %llu] [goal %llu] [ll %llu] "
+		       "[pl %llu] [lr %llu] [pr %llu] [len %u] [flags %u]\n",
+                       bdev->bd_disk ? bdev->bd_disk->disk_name : "",
+                       bdev->bd_dev, ar->inode->i_ino,
+		       (unsigned long long)ar->logical,
+		       (unsigned long long)ar->goal,
+                       (unsigned long long)ar->lleft,
+		       (unsigned long long)ar->pleft,
+		       (unsigned long long)ar->lright,
+		       (unsigned long long)ar->pright,
+		       ar->len, ar->flags);
+        }
+
 	ac = kmem_cache_alloc(ext4_ac_cachep, GFP_NOFS);
 	if (!ac) {
 		ar->len = 0;
@@ -4543,6 +4573,25 @@ repeat:
 		ac->ac_b_ex.fe_len = 0;
 		ar->len = 0;
 		ext4_mb_show_ac(ac);
+		if (ac->ac_pa) {
+			struct ext4_prealloc_space *pa = ac->ac_pa;
+
+			/* We can not make sure whether the bitmap has
+			 * been updated or not when fail case. So can
+			 * not revert pa_free back, just mark pa_error*/
+			pa->pa_error++;
+			ext4_error(sb,
+	                           "Updating bitmap error: [err %d] "
+	                           "[pa %p] [phy %lu] [logic %lu] "
+	                           "[len %u] [free %u] [error %u] "
+	                           "[inode %lu]", *errp, pa,
+	                           (unsigned long)pa->pa_pstart,
+	                           (unsigned long)pa->pa_lstart,
+	                           (unsigned)pa->pa_len,
+	                           (unsigned)pa->pa_free,
+	                           (unsigned)pa->pa_error,
+			pa->pa_inode ? pa->pa_inode->i_ino : 0);
+		}
 	}
 	ext4_mb_release_context(ac);
 out:
@@ -4699,6 +4748,16 @@ void ext4_free_blocks(handle_t *handle,
 		goto error_return;
 	}

+        if (dev_check_rdonly(sb->s_bdev)) {
+                struct block_device *bdev = sb->s_bdev;
+
+                printk(KERN_WARNING "Release to readonly device %s (%#x): "
+                       "[inode %lu] [block %lu] [count %lu] [is_meta %d]\n",
+                       bdev->bd_disk ? bdev->bd_disk->disk_name : "",
+                       bdev->bd_dev, inode->i_ino, (unsigned long)block,
+		       count, !!(flags & EXT4_FREE_BLOCKS_METADATA));
+        }
+
 	ext4_debug("freeing block %llu\n", block);
 	trace_ext4_free_blocks(inode, block, count, flags);

--- a/fs/ext4/mballoc.h
+++ b/fs/ext4/mballoc.h
@@ -19,6 +19,7 @@
 #include <linux/seq_file.h>
 #include <linux/blkdev.h>
 #include <linux/mutex.h>
+#include <linux/genhd.h>
 #include "ext4_jbd2.h"
 #include "ext4.h"

@@ -128,6 +129,7 @@ struct ext4_prealloc_space {
 	ext4_grpblk_t		pa_len;		/* len of preallocated chunk */
 	ext4_grpblk_t		pa_free;	/* how many blocks are free */
 	unsigned short		pa_type;	/* pa type. inode or group */
+	unsigned short          pa_error;
 	spinlock_t		*pa_obj_lock;
 	struct inode		*pa_inode;	/* hack, for history only */
 };
