diff -wur a/fs/ext4/ext4.h b/fs/ext4/ext4.h
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1154,6 +1154,9 @@ struct ext4_inode_info {
 #define EXT4_MOUNT_DISCARD		0x40000000 /* Issue DISCARD requests */
 #define EXT4_MOUNT_INIT_INODE_TABLE	0x80000000 /* Initialize uninitialized itables */
 
+/* we know this is a Lustre mount thanks to the DIRDATA flag */
+#define IS_LUSTRE_MOUNT(sb)	test_opt((sb), DIRDATA)
+
 /*
  * Mount flags set either automatically (could not be set by mount option)
  * based on per file system feature or property or in special cases such as
diff -wur a/fs/ext4/inode.c b/fs/ext4/inode.c
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4766,8 +4766,9 @@ void ext4_set_inode_flags(struct inod
 	if (init && ext4_should_enable_dax(inode))
 		new_fl |= S_DAX;
 
-	if (flags & EXT4_ENCRYPT_FL)
+	if (flags & EXT4_ENCRYPT_FL &&
+	    unlikely(!IS_LUSTRE_MOUNT(inode->i_sb)))
 		new_fl |= S_ENCRYPTED;
 	inode_set_flags(inode, new_fl,
 			S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC|S_DAX|
 			S_ENCRYPTED);
@@ -5753,8 +5757,9 @@ int ext4_getattr(const struct path *p
 		stat->attributes |= STATX_ATTR_APPEND;
 	if (flags & EXT4_COMPR_FL)
 		stat->attributes |= STATX_ATTR_COMPRESSED;
-	if (flags & EXT4_ENCRYPT_FL)
+	if (flags & EXT4_ENCRYPT_FL &&
+	    unlikely(!IS_LUSTRE_MOUNT(inode->i_sb)))
 		stat->attributes |= STATX_ATTR_ENCRYPTED;
 	if (flags & EXT4_IMMUTABLE_FL)
 		stat->attributes |= STATX_ATTR_IMMUTABLE;
 	if (flags & EXT4_NODUMP_FL)
diff -wur a/fs/ext4/xattr.c b/fs/ext4/xattr.c
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -654,6 +654,7 @@
 	up_read(&EXT4_I(inode)->xattr_sem);
 	return error;
 }
+EXPORT_SYMBOL(ext4_xattr_get);
 
 static int
 ext4_xattr_list_entries(struct dentry *dentry, struct ext4_xattr_entry *entry,
@@ -2413,12 +2413,19 @@ retry_inode:
 			ext4_handle_sync(handle);
 	}
 
+	if (!error && name_index == EXT4_XATTR_INDEX_ENCRYPTION &&
+	    strcmp(name, "c") == 0) {
+		EXT4_I(inode)->i_flags |= EXT4_ENCRYPT_FL;
+		mark_inode_dirty(inode);
+	}
+
 cleanup:
 	brelse(is.iloc.bh);
 	brelse(bs.bh);
 	ext4_write_unlock_xattr(inode, &no_expand);
 	return error;
 }
+EXPORT_SYMBOL(ext4_xattr_set_handle);
 
 int ext4_xattr_set_credits(struct inode *inode, size_t value_len,
 			   bool is_create, int *credits)
